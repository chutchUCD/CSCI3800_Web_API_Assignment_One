{
	"id": "999aa182-3ffe-7a38-d595-21b6b86d558c",
	"name": "TuringTitle",
	"description": "",
	"order": [
		"1492ab04-379b-c49c-2d39-30f530cdc399",
		"c02a7a9e-a952-10e7-645b-cde0c414bfff"
	],
	"folders": [],
	"timestamp": 1485037270839,
	"owner": "",
	"public": false,
	"requests": [
		{
			"id": "1492ab04-379b-c49c-2d39-30f530cdc399",
			"headers": "",
			"url": "https://www.googleapis.com/books/v1/volumes?q={{book_title}}",
			"preRequestScript": "postman.setEnvironmentVariable(\"book_title\", \"Turing\");\npostman.setEnvironmentVariable(\"error\", \"none\");\npostman.setEnvironmentVariable(\"iterate_test\", \"0\");    \n",
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "//var rj;//response JSON.\ntests[\"Tests Valid?\"] = true;//see catch statement\ntry {\n    var rj = JSON.parse(responseBody);//response json\n    tests[\"JSON has title?\"] = responseBody.has(\"title\");\n    tests[\"Contains book title, case insensitive\"] = true;\n    tests[\"Contains book title, case sensitive\"] = true;\n    var idxa = [];//InDeX Array.\n    for(var i = 0; i < rj.items.length; i++){\n        idxa.push(rj.items[i].id);//save book id to an array. \n        //case Insensitive Check.\n        if(! ( rj.items[i].volumeInfo.title.toLowerCase().includes(postman.getEnvironmentVariable(\"book_title\").toLowerCase()))){\n            tests[\"Contains book title, case insensitive\"] = false;\n            break;\n        }\n        //case sensitive check\n        if( ! (rj.items[i].volumeInfo.title.includes(postman.getEnvironmentVariable(\"book_title\")))){\n            tests[\"Contains book title, case sensitive\"] = false;\n            break;\n        }\n            \n    }\n    postman.setEnvironmentVariable(\"book_ids\", idxa);\n    tests[\"Status code is 200\"] = responseCode.code === 200;\n}\ncatch (e){\n    //This at least says that the test is invalid. If there is any error\n    tests[\"Tests Valid?\"] = false;\n    postman.setEnvironmentVariable(\"error\", e);//and this is essentially 'console.log(e)'\n}\n\n\n\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485112981308,
			"name": "https://www.googleapis.com/books/v1/volumes?q={{turing}}",
			"description": "Request for books with 'turing' in the book title.",
			"collectionId": "999aa182-3ffe-7a38-d595-21b6b86d558c",
			"responses": []
		},
		{
			"id": "c02a7a9e-a952-10e7-645b-cde0c414bfff",
			"headers": "",
			"url": "https://www.googleapis.com/books/v1/volumes/{{target_id}} ",
			"preRequestScript": "postman.setEnvironmentVariable(\"error\", \"none\");\n//break the book_ids string into usable strings\nvar idxa = postman.getEnvironmentVariable(\"book_ids\").split(\",\");\n//then get them as an environment variable\npostman.setEnvironmentVariable(\"target_id\", idxa[postman.getEnvironmentVariable(\"iterate_test\")]);",
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "tests[\"Tests Valid?\"]=true;\ntry{\n    var count = Number(postman.getEnvironmentVariable(\"iterate_test\"));\n    var idxa = postman.getEnvironmentVariable(\"book_ids\").split(\",\");\n    console.log(idxa[count]);\n    var rj = JSON.parse(responseBody);\n    tests[\"Id matches?\"] = rj.id === idxa[count];\n    \n    postman.setEnvironmentVariable(\"iterate_test\", String(count));\n    //status code \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    \n    count+=1;//make a cycling request count.\n    if ( count > idxa.length - 1 ){\n        count=0;\n    }\n} catch (e){\n    tests[\"Tests Valid?\"] = false;\n    //console.log(e)//Just send it to the postman console.\n    /*NOT! Returns an object, postmans scripting language doesn't let you do a string conversion.\n    Not liking this.\n    */\n    postman.setEnvironmentVariable(\"error\", e);\n    \n}\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1485112234603,
			"name": "https://www.googleapis.com/books/v1/volumes/{{target_id}}",
			"description": "Requests a book by id. Make sure to call the books by title test first to populate the book_ids list that this will use.",
			"collectionId": "999aa182-3ffe-7a38-d595-21b6b86d558c",
			"responses": []
		}
	]
}